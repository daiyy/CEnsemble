# Generated automatically from Makefile.in by configure.
#*************************************************************
# Makefile */
# Author: Mark Hayden, 11/99 */
# Copyright 1999, 2000 Mark Hayden.  All rights reserved. */
# See license.txt for further information. */
#*************************************************************

.SUFFIXES: .o .c .so

#CC = cc -std -inline manual -I/usr/include
#CC = checker gcc -DPURIFY
CC = gcc

# A bunch of warnings to enable (MH: I define these through an
# environment variable so that others do not get all the warnings).
WARNINGS = $(CENSEMBLE_ADDL_WARNINGS)
#WARNINGS = -Wall -Wwrite-strings -Wstrict-prototypes -Werror # -Wsign-compare -Wconversion -fno-builtin

# Define NDEBUG to disable assertions
ASSERT =# -DNDEBUG -DMINIMIZE_CODE

DEBUGGING = # -fcheck-memory-usage -fprefix-function-name

# Add -p to include profiling info
PROFILE =# -p

# Definitions provided by autoconf
CFLAGS_BASIC = -g -O2
CFLAGS_BASIC = -fPIC -O2


CFLAGS = $(CFLAGS_BASIC) $(OPTIMIZE) $(WARNINGS) $(DEBUGGING) $(PROFILE) $(ASSERT) -I.

MCHECK_CFLAGS = $(OPTIMIZE) $(WARNINGS) -g $(PROFILE) $(ASSERT) $(THREADS)

# Different linking options

# Normal, nothing extra
LINKLIBS =

# Different versions using the Hans-boehm gc library
#LINKLIBS = -lgc_leak # -lpthread
#LINKLIBS = -lgc -lpthread

# With the Electric Fence library
#LINKLIBS = -lefence

# With one of my memory checkers
#LINKLIBS = memdebug/leak.o
#LINKLIBS = memdebug/mcheck.o
#LINKLIBS = memdebug/freedbg.o

# For Alpha-Dunix
#LINKLIBS = -L./mcheck -rdynamic -ldl -lmem -lbfd -liberty

TOPOBJS=\
addr.o  alarm.o  appl.o  appl_intf.o  array.o \
conn.o  domain.o  endpt.o  etime.o  event.o  \
group.o  iovec.o  iq.o  layer.o  marsh.o  \
md5.o  priq.o  proto.o  equeue.o  refbuf.o  \
sched.o  stack.o  stacktrace.o  sys.o  trace.o  \
transport.o  unique.o  util.o  version.o  view.o  \
wrapper.o netsim.o  real.o  udp.o chk_fifo.o  \
chk_sync.o  chk_trans.o  display.o  drop.o  \
bottom.o  intra.o  elect.o  heal.o  \
inter.o  leave.o  local.o  mnak.o  \
present.o  primary.o  pt2pt.o  pt2ptw.o  \
stable.o  suspect.o  sync.o  top.o  \
top_appl.o  xfer.o  vsync.o




UNUSED_INFR_OBJS = \
	infr/tcp.o \

# Infrastructure modules
INFR_OBJS = \
	infr/addr.o \
	infr/alarm.o \
	infr/appl.o \
	infr/appl_intf.o \
	infr/array.o \
	infr/conn.o \
	infr/domain.o \
	infr/endpt.o \
	infr/etime.o \
	infr/event.o \
	infr/group.o \
	infr/iovec.o \
	infr/iq.o \
	infr/layer.o \
	infr/marsh.o \
	infr/md5.o \
	infr/priq.o \
	infr/proto.o \
	infr/equeue.o \
	infr/refbuf.o \
	infr/sched.o \
	infr/stack.o \
	infr/stacktrace.o \
	infr/sys.o \
	infr/trace.o \
	infr/transport.o \
	infr/unique.o \
	infr/util.o \
	infr/version.o \
	infr/view.o \
	infr/wrapper.o

# Transport related modules
TRANS_OBJS = \
	trans/netsim.o \
	trans/real.o \
	trans/udp.o

# Layer modules only needed for debugging
DEBUG_LAYER_OBJS = \
	layers/chk_fifo.o \
	layers/chk_sync.o \
	layers/chk_trans.o \
	layers/display.o \
	layers/drop.o

# Layer modules
LAYER_OBJS = \
	$(DEBUG_LAYER_OBJS) \
	layers/bottom.o \
	layers/intra.o \
	layers/elect.o \
	layers/heal.o \
	layers/inter.o \
	layers/leave.o \
	layers/local.o \
	layers/mnak.o \
	layers/present.o \
	layers/primary.o \
	layers/pt2pt.o \
	layers/pt2ptw.o \
	layers/stable.o \
	layers/suspect.o \
	layers/sync.o \
	layers/top.o \
	layers/top_appl.o \
	layers/xfer.o \
	layers/vsync.o

#LAYER_SHOBS = $(LAYER_OBJS:.o=.so)

# Layers that will be linked staticly
STATIC_LAYER_OBJS = $(LAYER_OBJS)

# Root of the Ensemble distribution
ENS_ROOT = ../ensemble
HOTDIR = $(ENS_ROOT)/def/obj/i386-linux
HOT_INC = $(ENS_ROOT)/hot/include
HOTOBJS = \
	hot/hot_intf.o \
	$(HOTDIR)/hot_msg.o \
	$(HOTDIR)/hot_sys.o \
	$(HOTDIR)/hot_error.o \
	$(HOTDIR)/pthread_intf.o \
	$(HOTDIR)/hot_mem.o

# Comment this out if you don't want to build/link the HOT library
BUILD_HOT =# demo/hot_test

# (MH: CENSEMBLE_BUILD_ADDITIONAL is something I define to build some optional
# things.)

all-no-additional: \
	demo/rand \
	demo/fifo \
	demo/gossip \
	$(BUILD_HOT) \
	$(LAYER_SHOBS)

all: $(CENSEMBLE_BUILD_ADDTIONAL) all-no-additional

#all: lib/kens.o

demo/fifo: demo/fifo.o lib/libens.a
	rm -f demo/fifo
	$(CC) $(CFLAGS_BASIC) $(PROFILE) -o demo/fifo fifo.o lib/libens.a $(LINKLIBS)

demo/rand: demo/rand.o lib/libens.a
	rm -f demo/rand
	$(CC) $(CFLAGS_BASIC) $(PROFILE) -o demo/rand rand.o lib/libens.a $(LINKLIBS)

demo/gossip: demo/gossip.o lib/libens.a
	rm -f demo/gossip
	$(CC) $(CFLAGS_BASIC) $(PROFILE) -o demo/gossip gossip.o lib/libens.a $(LINKLIBS)

demo/hot_test: lib/libhot.a $(HOTDIR)/hot_test.o
	$(CC) $(CFLAGS_BASIC) $(PROFILE) -o demo/hot_test $(HOTDIR)/hot_test.o lib/libhot.a -lpthread $(LINKLIBS)

OBJS = $(INFR_OBJS) $(TRANS_OBJS) $(STATIC_LAYER_OBJS) $(PAXOS_OBJS) $(DLM_OBJS) $(DBD_OBJS)

lib/libens.a: $(OBJS)
	ar cr lib/libens.a $(TOPOBJS)
	ld -b -s -o lib/libens.sl $(TOPOBJS)

lib/libhot.a: lib/libens.a hot/hot_intf.o
	$(RM) lib/libhot.a
	cp lib/libens.a lib/libhot.a
	ar r lib/libhot.a hot/hot_intf.o $(HOTOBJS)
	ranlib lib/libhot.a

lib/libens.o: $(OBJS)
	ld -r -o lib/libens.o $(OBJS)

lib/kens.o: lib/libens.o infr/linux.o infr/af_ensemble.o demo/rand.o
	ld -r -o lib/kens.o lib/libens.o infr/linux.o infr/af_ensemble.o demo/rand.o
#	insmod -p lib/kens.o

infr/use_gc.o: infr/use_gc.c
	$(CC) -c $< -o $@

memdebug/mcheck.o: memdebug/mcheck.c
	$(CC) $(MCHECK_CFLAGS) -c $< -o $@

hot/hot_intf.o: hot/hot_intf.c
	$(CC) -I $(HOT_INC) $(CFLAGS) -c $< -o $@

.o.so:
	gcc -shared -o $@ $<



bindir=/opt/censemble/bin
libdir=/opt/censemble/lib
incdir=/opt/censemble/include

EXES=demo/fifo   demo/gossip    demo/rand


HEADERS=\
./infr/addr.h\
./infr/alarm.h\
./infr/appl.h\
./infr/appl_intf.h\
./infr/async.h\
./infr/conn.h\
./infr/domain.h\
./infr/endpt.h\
./infr/event.h\
./infr/group.h\
./infr/iq.h\
./infr/layer.h\
./infr/layer_supp.h\
./infr/marsh.h\
./infr/md5.h\
./infr/priq.h\
./infr/proto.h\
./infr/equeue.h\
./infr/sys.h\
./infr/refbuf.h\
./infr/sched.h\
./infr/stack.h\
./infr/array.h\
./infr/trans.h\
./infr/trace.h\
./infr/transport.h\
./infr/util.h\
./infr/unique.h\
./infr/version.h\
./infr/iovec.h\
./infr/view.h\
./infr/equeue_supp.h\
./infr/etime.h\
./infr/hash_supp.h\
./infr/queuep.h\
./infr/array_supp.h\
./infr/tcp.h\
./infr/param.h\
./infr/stacktrace.h\
./infr/hash.h\
./infr/config.h\
./trans/netsim.h\
./trans/real.h\
./trans/udp.h



install:
	test -d $(bindir) || mkdirhier $(bindir)
	for i in $(EXES) ; do \
		bsdinst -c  -m 0775 $$i $(bindir) ; \
	done
	test -d $(libdir) || mkdirhier $(libdir)
	bsdinst -c  -m 0644 lib/libens.a $(libdir)
	bsdinst -c  -m 0755 lib/libens.sl $(libdir)
	test -d $(incdir) || mkdirhier $(incdir)
	for i in $(HEADERS) ; do \
		bsdinst -c  -m 0644 $$i $(incdir) ; \
	done















wc:
	wc -l infr/*.c
	wc -l trans/*.c
	wc -l layers/*.c
	strip */*.o
	wc -c infr/*.o trans/*.o layers/*.o


clean:
	-rm -f *.o
	-rm -f lib/libens.a  lib/libens.sl
	-rm -f demo/fifo  demo/gossip   demo/rand


veryclean:
	$(RM) *.[ao]
	$(RM) infr/*.o
	$(RM) layers/*.o
	$(RM) layers/*.so
	$(RM) trans/*.o
	$(RM) memdebug/*.o
	$(RM) demo/*.o
	$(RM) hot/*.o
	$(RM) linux/*.o
	$(RM) gmon.out gmon.txt
	$(RM) censemble.tgz
	$(RM) TAGS ID
	$(RM) lib/*.[oa]
	$(RM) demo/rand demo/fifo demo/hot_test demo/gossip
	$(RM) demo/*.third
	$(RM) demo/*.3log
	$(RM) demo/core
	( cd perl/Ensemble ; /home/$(USER)/Perl-5.6/bin/perl Makefile.PL )
	$(MAKE) -C perl/Ensemble clean
	$(RM) perl/Ensemble/Makefile.old
	$(RM) .size.o .infr.o
	$(RM) `find -name ".nfs*"`
	$(RM) lib/st*

size: $(OBJS)
	ld -r -o .size.o $(OBJS)
	strip .size.o
	wc -c .size.o
	ld -r -o .infr.o $(INFR_OBJS)
	strip .infr.o
	wc -c .infr.o

autoconf:
	$(RM) ./configure
	autoconf
	./configure
#	chmod a-w ./Makefile
#	chmod a-w ./configure

DEPCC=cc

depend:
	$(RM) .depend.tmp
	$(DEPCC) -MM -I. infr/*.c |\
	  sed -e "s/\(.*\.o\)/infr\/\1/" >> .depend.tmp
	$(DEPCC) -MM -I. layers/*.c |\
	  sed -e "s/\(.*\.o\)/layers\/\1/" >> .depend.tmp
	$(DEPCC) -MM -I. trans/*.c |\
	  sed -e "s/\(.*\.o\)/trans\/\1/" >> .depend.tmp
	$(DEPCC) -MM -I. demo/*.c |\
	  sed -e "s/\(.*\.o\)/demo\/\1/" >> .depend.tmp
	mv .depend.tmp .depend

include .depend

tags:
	etags infr/*.[ch] layers/*.[ch] trans/*.[ch] demo/*.[ch]
